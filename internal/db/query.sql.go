// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
    name, 
    description, 
    price, 
    availability
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, description, price, availability
`

type CreateProductParams struct {
	Name         string
	Description  pgtype.Text
	Price        int32
	Availability int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Availability,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Availability,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    email,
    hashed_password
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, hashed_password, is_verified, created_at
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets(
    user_id,
    balance
) VALUES (
    $1, $2
) RETURNING id, user_id, balance, created_at, updated_at
`

type CreateWalletParams struct {
	UserID  int32
	Balance int32
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.UserID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1 AND email = $2
`

type DeleteUserParams struct {
	ID    int32
	Email string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.Email)
	return err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWallet, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, availability FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Availability,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, is_verified, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletByUserID = `-- name: GetWalletByUserID :one
SELECT id, user_id, balance, created_at, updated_at FROM wallets WHERE user_id = $1
`

func (q *Queries) GetWalletByUserID(ctx context.Context, userID int32) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, availability FROM products
ORDER BY id ASC LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Availability,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWallets = `-- name: ListWallets :many
SELECT id, user_id, balance, created_at, updated_at FROM wallets 
ORDER BY id ASC LIMIT $1 OFFSET $2
`

type ListWalletsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWallets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE 
    products
SET 
    name = coalesce($1, name),
    description = coalesce($2, description),
    price = coalesce($3, price),
    availability = coalesce($4, availability)
WHERE 
    id = $5
AND (
    $1::VARCHAR IS NOT NULL AND $1 IS DISTINCT FROM name OR
    $2::TEXT IS NOT NULL AND $2 IS DISTINCT FROM description OR
    $3::INT IS NOT NULL AND $3 IS DISTINCT FROM price OR
    $4::INT IS NOT NULL AND $4 IS DISTINCT FROM availability
)  RETURNING id, name, description, price, availability
`

type UpdateProductParams struct {
	Name         string
	Description  pgtype.Text
	Price        int32
	Availability int32
	ID           int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Availability,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Availability,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    username = coalesce($1, username),
    hashed_password = coalesce($2, hashed_password)
WHERE
    id = $3
AND (
    $1::VARCHAR IS NOT NULL AND $1 IS DISTINCT FROM username OR
    $2::VARCHAR IS NOT NULL AND $2 IS DISTINCT FROM hashed_password
) RETURNING id, username, email, hashed_password, is_verified, created_at
`

type UpdateUserParams struct {
	Username       string
	HashedPassword string
	ID             int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserVerification = `-- name: UpdateUserVerification :exec
UPDATE users SET is_verified = TRUE WHERE id = $1 AND email = $2
`

type UpdateUserVerificationParams struct {
	ID    int32
	Email string
}

func (q *Queries) UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) error {
	_, err := q.db.Exec(ctx, updateUserVerification, arg.ID, arg.Email)
	return err
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE
    wallets
SET
    balance = balance + $1, 
    updated = NOW()
WHERE 
    user_id = $2
RETURNING id, user_id, balance, created_at, updated_at
`

type UpdateWalletParams struct {
	Balance int32
	UserID  int32
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWallet, arg.Balance, arg.UserID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
